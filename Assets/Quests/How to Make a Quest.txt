1.Create an instance of the Quest prefab
2.Create a script of the same name as your quest name, have it inherit QuestRepository instead of MonoBehavior
  - In the start() function, add the quest to the quest repository with base.AddQuest("[quest name]");
  - Create a void function with the name as the same as the quest and class name, but with an 's' at the end
    - This is for base.SetCurrentQuestStatus("") whenever some class calls for an update on the quest status.
  - Create a void OpenWindow() function to display the window of the quest if one is needed (probably is) using the OpenCustomWindow(Transform) function of the MenuManager
  - If the quest needs to detect items added or removed from inventory, create a void function and in Start() add InventoryData.OnChange += [function name]
  - To set the quest as the active quest, use base.SetCurrentQuest("[quest name]") and then base.SetCurrentGameObject(gameObject)
3.Add the quest script to the game object instead of the sample one
4.Setup in the InteractWith script the function to call to open the quest window if needed
5.Position the object in the scene and adjust the box collider accordingly to the interact radius if needed
  